import asyncio
import socket

async def scan_port(ip, port, open_ports):
    loop = asyncio.get_event_loop()
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(1)
        try:
            await loop.sock_connect(sock, (ip, port))
            print(f"Port {port}: Open")
            open_ports.append(port)
        except socket.error:
            print(f"Port {port}: Closed")
        finally:
            print(f"Scanning port {port} completed.")

async def scan_ports(ip, start_port, end_port):
    open_ports = []
    tasks = [scan_port(ip, port, open_ports) for port in range(start_port, end_port + 1)]
    await asyncio.wait(tasks)
    return open_ports

async def main():
    ip = input("Enter the IP address to scan: ")
    start_port = int(input("Enter the starting port number: "))
    end_port = int(input("Enter the ending port number: "))

    common_ports = [
        20, 21, 22, 23, 25, 53, 80, 110, 123, 135, 137, 138, 139,
        143, 443, 445, 1433, 3306, 3389, 8080, 5900, 6000, 8000, 8080, 10000
    ]

    # Scan common ports first
    common_open_ports = await scan_ports(ip, min(common_ports), max(common_ports))
    print("Common Ports Scan Completed.")
    print(f"Open ports among common ports: {common_open_ports}")

    # If there are more ports to scan within the specified range
    if start_port > max(common_ports) or end_port > max(common_ports):
        additional_open_ports = await scan_ports(ip, max(common_ports) + 1, end_port)
        print("Additional Ports Scan Completed.")
        print(f"Open ports among additional ports: {additional_open_ports}")

# Run the asynchronous function using asyncio.run()
asyncio.run(main())
